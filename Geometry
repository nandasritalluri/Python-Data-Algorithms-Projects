#  File: Geometry.py

#  Description: This file develops several classes - Point, Sphere, Cube, and Cylinder and 
#  creates various functions for each to test different geometric values.

import math

class Point (object):
  # constructor with default values
  def __init__ (self, x = 0, y = 0, z = 0):
    self.x = float(x)
    self.y = float(y)
    self.z = float(z)
  # create a string representation of a Point
  # returns a string of the form (x, y, z)
  def __str__ (self):
    return ("(" + str(self.x) + ", " + str(self.y) + ", " + str(self.z) + ")")
  # get distance to another Point object
  # other is a Point object
  # returns the distance as a floating point number
  def distance (self, other):
    return math.sqrt(((self.x-other.x)**2) + ((self.y-other.y)**2) + ((self.z-other.z)**2))
  # test for equality between two points
  # other is a Point object
  # returns a Boolean
  def __eq__ (self, other):
    tol = 1.0e-6
    return (abs(self.x-other.x) < tol) and (abs(self.y - other.y) < tol) and (abs(self.z - other.z) < tol)

class Sphere (object):
  # constructor with default values
  def __init__ (self, x = 0, y = 0, z = 0, radius = 1):
    self.x = float(x)
    self.y = float(y)
    self.z = float(z)
    self.center = Point(x,y,z)
    self.radius = float(radius)

  # returns string representation of a Sphere of the form:
  # Center: (x, y, z), Radius: value
  def __str__ (self):
    return ("Center: (" + str(self.x) + ", " + str(self.y) + ", " + str(self.z) + "), Radius: " + str(self.radius))

  # compute surface area of Sphere
  # returns a floating point number
  def area (self):
    surface_area_sphere = 4*math.pi*float(self.radius)*float(self.radius)
    return surface_area_sphere

  # compute volume of a Sphere
  # returns a floating point number
  def volume (self):
    volume_sphere = 4/3*math.pi*float(self.radius)*float(self.radius)*float(self.radius)
    return volume_sphere

  # determines if a Point is strictly inside the Sphere
  # p is Point object
  # returns a Boolean
  def is_inside_point (self, p):
    return self.center.distance(p) < self.radius

  # determine if another Sphere is strictly inside this Sphere
  # other is a Sphere object
  # returns a Boolean
  def is_inside_sphere (self, other):
    dist_centers = self.center.distance(other.center)
    return(dist_centers + float(other.radius)) < float(self.radius)

  # determine if a Cube is strictly inside this Sphere
  # determine if the eight corners of the Cube are strictly 
  # inside the Sphere
  # a_cube is a Cube object
  # returns a Boolean
  def is_inside_cube (self, a_cube):
    corner_toprightback = Point(a_cube.x+(0.5*a_cube.side), a_cube.y+(0.5*a_cube.side), a_cube.z-(0.5*a_cube.side))
    corner_toprightfront = Point(a_cube.x+(0.5*a_cube.side), a_cube.y+(0.5*a_cube.side), a_cube.z+(0.5*a_cube.side))
    corner_topleftback = Point(a_cube.x-(0.5*a_cube.side), a_cube.y+(0.5*a_cube.side), a_cube.z-(0.5*a_cube.side)) 
    corner_topleftfront = Point(a_cube.x-(0.5*a_cube.side), a_cube.y+(0.5*a_cube.side), a_cube.z+(0.5*a_cube.side))
    corner_bottomleftback = Point(a_cube.x-(0.5*a_cube.side), a_cube.y-(0.5*a_cube.side), a_cube.z-(0.5*a_cube.side))
    corner_bottomleftfront = Point(a_cube.x-(0.5*a_cube.side), a_cube.y-(0.5*a_cube.side), a_cube.z+(0.5*a_cube.side)) 
    corner_bottomrightback = Point(a_cube.x+(0.5*a_cube.side), a_cube.y-(0.5*a_cube.side), a_cube.z-(0.5*a_cube.side))
    corner_bottomrightfront = Point(a_cube.x+(0.5*a_cube.side), a_cube.y-(0.5*a_cube.side), a_cube.z+(0.5*a_cube.side)) 
    if ((self.is_inside_point(corner_toprightback) == True) and (self.is_inside_point(corner_toprightfront) == True) and 
    (self.is_inside_point(corner_topleftback) == True) and (self.is_inside_point(corner_topleftfront) == True) and 
    (self.is_inside_point(corner_bottomleftback) == True) and (self.is_inside_point(corner_bottomleftfront) == True) and 
    (self.is_inside_point(corner_bottomrightback) == True) and (self.is_inside_point(corner_bottomrightfront) == True)):
      return True
    else:
      return False
      
  # determine if a Cylinder is strictly inside this Sphere
  # a_cyl is a Cylinder object
  # returns a Boolean
  def is_inside_cyl (self, a_cyl):
    dist_centers = self.center.distance(a_cyl.center)
    check_rad = False
    check_height = False
    if (dist_centers + float(a_cyl.radius)) < float(self.radius):
      check_rad = True
    if (dist_centers + float(a_cyl.height/2)) < float(self.radius):
      check_height = True
    if (check_rad == True) and (check_height == True):
      return True
    else:
      return False
      
  # determine if another Sphere is strictly outside this Sphere
  # other is a Sphere object
  # returns a Boolean
  def is_outside_sphere (self, other):
    dist_centers = self.center.distance(other.center)
    return(dist_centers - float(other.radius)) > float(self.radius)

  # determine if another Sphere intersects this Sphere
  # other is a Sphere object
  # two spheres intersect if they are not strictly inside
  # or not strictly outside each other
  # returns a Boolean
  def does_intersect_sphere (self, other):
    dist_centers = self.center.distance(other.center)
    if self.is_inside_sphere(other) == False and other.is_inside_sphere(self) == False and dist_centers - other.radius < self.radius:
      return True
    else:
      return False
  
  # determine if a Cube is strictly outside this Sphere
  # determine if the eight corners of the Cube are strictly 
  # inside the Sphere
  # a_cube is a Cube object
  # returns a Boolean
  def is_outside_cube (self, a_cube):
    corner_toprightback = Point(a_cube.x+(0.5*a_cube.side), a_cube.y+(0.5*a_cube.side), a_cube.z-(0.5*a_cube.side))
    corner_toprightfront = Point(a_cube.x+(0.5*a_cube.side), a_cube.y+(0.5*a_cube.side), a_cube.z+(0.5*a_cube.side))
    corner_topleftback = Point(a_cube.x-(0.5*a_cube.side), a_cube.y+(0.5*a_cube.side), a_cube.z-(0.5*a_cube.side)) 
    corner_topleftfront = Point(a_cube.x-(0.5*a_cube.side), a_cube.y+(0.5*a_cube.side), a_cube.z+(0.5*a_cube.side))
    corner_bottomleftback = Point(a_cube.x-(0.5*a_cube.side), a_cube.y-(0.5*a_cube.side), a_cube.z-(0.5*a_cube.side))
    corner_bottomleftfront = Point(a_cube.x-(0.5*a_cube.side), a_cube.y-(0.5*a_cube.side), a_cube.z+(0.5*a_cube.side)) 
    corner_bottomrightback = Point(a_cube.x+(0.5*a_cube.side), a_cube.y-(0.5*a_cube.side), a_cube.z-(0.5*a_cube.side))
    corner_bottomrightfront = Point(a_cube.x+(0.5*a_cube.side), a_cube.y-(0.5*a_cube.side), a_cube.z+(0.5*a_cube.side)) 
    if ((self.is_inside_point(corner_toprightback) == False) and (self.is_inside_point(corner_toprightfront) == False) and 
    (self.is_inside_point(corner_topleftback) == False) and (self.is_inside_point(corner_topleftfront) == False) and 
    (self.is_inside_point(corner_bottomleftback) == False) and (self.is_inside_point(corner_bottomleftfront) == False) and 
    (self.is_inside_point(corner_bottomrightback) == False) and (self.is_inside_point(corner_bottomrightfront) == False)):
      return True
    else:
      return False

  # determine if a Cube intersects this Sphere
  # the Cube and Sphere intersect if they are not
  # strictly inside or not strictly outside the other
  # a_cube is a Cube object
  # returns a Boolean
  def does_intersect_cube (self, a_cube):
    dist_centers = self.center.distance(a_cube.center)
    if self.is_inside_cube(a_cube) == False and a_cube.is_inside_sphere(self) == False and ((dist_centers - a_cube.side/2) < self.radius):
      return True
    else:
      return False

  # return the largest Cube object that is circumscribed
  # by this Sphere
  # all eight corners of the Cube are on the Sphere
  # returns a Cube object
  def circumscribe_cube (self):
    largest_cube_side = (2*float(self.radius))/math.sqrt(3)
    return Cube(self.x,self.y,self.z,largest_cube_side)

class Cube (object):
  # Cube is defined by its center (which is a Point object)
  # and side. The faces of the Cube are parallel to x-y, y-z,
  # and x-z planes.
  def __init__ (self, x = 0, y = 0, z = 0, side = 1):
    self.x = float(x)
    self.y = float(y)
    self.z = float(z)
    self.center = Point(x,y,z)
    self.side = float(side)

  # string representation of a Cube of the form: 
  # Center: (x, y, z), Side: value
  def __str__ (self):
    return ("Center: (" + str(self.x) + ", " + str(self.y) + ", " + str(self.z) + "), Side: " + str(self.side))

  # compute the total surface area of Cube (all 6 sides)
  # returns a floating point number
  def area (self):
    surface_area_cube = 6*float(self.side)*float(self.side)
    return surface_area_cube

  # compute volume of a Cube
  # returns a floating point number
  def volume (self):
    volume_cube = float(self.side)*float(self.side)*float(self.side)
    return volume_cube

  # determines if a Point is strictly inside this Cube
  # p is a point object
  # returns a Boolean
  def is_inside_point (self, p):
    return (p.x > self.x-(self.side/2)) and (p.x < self.x+(self.side/2)) and (p.y > self.y-(self.side/2)) and (p.y < self.y+(self.side/2)) and (p.z > self.z-(self.side/2)) and (p.z < self.z+(self.side/2))

  # determine if a Sphere is strictly inside this Cube 
  # a_sphere is a Sphere object
  # returns a Boolean
  def is_inside_sphere (self, a_sphere):
    dist_centers = self.center.distance(a_sphere.center)
    return(dist_centers + float(a_sphere.radius)) < float(self.side/2)

  # determine if another Cube is strictly inside this Cube
  # other is a Cube object
  # returns a Boolean
  def is_inside_cube (self, other):
    corner_toprightback = Point(other.x+(0.5*other.side), other.y+(0.5*other.side), other.z-(0.5*other.side))
    corner_toprightfront = Point(other.x+(0.5*other.side), other.y+(0.5*other.side), other.z+(0.5*other.side))
    corner_topleftback = Point(other.x-(0.5*other.side), other.y+(0.5*other.side), other.z-(0.5*other.side)) 
    corner_topleftfront = Point(other.x-(0.5*other.side), other.y+(0.5*other.side), other.z+(0.5*other.side))
    corner_bottomleftback = Point(other.x-(0.5*other.side), other.y-(0.5*other.side), other.z-(0.5*other.side))
    corner_bottomleftfront = Point(other.x-(0.5*other.side), other.y-(0.5*other.side), other.z+(0.5*other.side)) 
    corner_bottomrightback = Point(other.x+(0.5*other.side), other.y-(0.5*other.side), other.z-(0.5*other.side))
    corner_bottomrightfront = Point(other.x+(0.5*other.side), other.y-(0.5*other.side), other.z+(0.5*other.side)) 
    return ((self.is_inside_point(corner_toprightback)) and (self.is_inside_point(corner_toprightfront)) and 
    (self.is_inside_point(corner_topleftback)) and (self.is_inside_point(corner_topleftfront)) and 
    (self.is_inside_point(corner_bottomleftback)) and (self.is_inside_point(corner_bottomleftfront)) and 
    (self.is_inside_point(corner_bottomrightback)) and (self.is_inside_point(corner_bottomrightfront)))

  # determine if a Cylinder is strictly inside this Cube
  # a_cyl is a Cylinder object
  # returns a Boolean
  def is_inside_cylinder (self, a_cyl):
    corner_toprightback = Point(a_cyl.x+(0.5*a_cyl.radius), a_cyl.y+(0.5*a_cyl.radius), a_cyl.z-(0.5*a_cyl.height))
    corner_toprightfront = Point(a_cyl.x+(0.5*a_cyl.radius), a_cyl.y+(0.5*a_cyl.radius), a_cyl.z+(0.5*a_cyl.height))
    corner_topleftback = Point(a_cyl.x-(0.5*a_cyl.radius), a_cyl.y+(0.5*a_cyl.radius), a_cyl.z-(0.5*a_cyl.height)) 
    corner_topleftfront = Point(a_cyl.x-(0.5*a_cyl.radius), a_cyl.y+(0.5*a_cyl.radius), a_cyl.z+(0.5*a_cyl.height))
    corner_bottomleftback = Point(a_cyl.x-(0.5*a_cyl.radius), a_cyl.y-(0.5*a_cyl.radius), a_cyl.z-(0.5*a_cyl.height))
    corner_bottomleftfront = Point(a_cyl.x-(0.5*a_cyl.radius), a_cyl.y-(0.5*a_cyl.radius), a_cyl.z+(0.5*a_cyl.height)) 
    corner_bottomrightback = Point(a_cyl.x+(0.5*a_cyl.radius), a_cyl.y-(0.5*a_cyl.radius), a_cyl.z-(0.5*a_cyl.height))
    corner_bottomrightfront = Point(a_cyl.x+(0.5*a_cyl.radius), a_cyl.y-(0.5*a_cyl.radius), a_cyl.z+(0.5*a_cyl.height)) 
    return ((self.is_inside_point(corner_toprightback)) and (self.is_inside_point(corner_toprightfront)) and 
    (self.is_inside_point(corner_topleftback)) and (self.is_inside_point(corner_topleftfront)) and 
    (self.is_inside_point(corner_bottomleftback)) and (self.is_inside_point(corner_bottomleftfront)) and 
    (self.is_inside_point(corner_bottomrightback)) and (self.is_inside_point(corner_bottomrightfront)))

  # determine if another Cube is strictly outside this Cube
  # other is a Cube object
  # returns a Boolean
  def is_outside_cube (self, other):
    corner_toprightback = Point(other.x+(0.5*other.side), other.y+(0.5*other.side), other.z-(0.5*other.side))
    corner_toprightfront = Point(other.x+(0.5*other.side), other.y+(0.5*other.side), other.z+(0.5*other.side))
    corner_topleftback = Point(other.x-(0.5*other.side), other.y+(0.5*other.side), other.z-(0.5*other.side)) 
    corner_topleftfront = Point(other.x-(0.5*other.side), other.y+(0.5*other.side), other.z+(0.5*other.side))
    corner_bottomleftback = Point(other.x-(0.5*other.side), other.y-(0.5*other.side), other.z-(0.5*other.side))
    corner_bottomleftfront = Point(other.x-(0.5*other.side), other.y-(0.5*other.side), other.z+(0.5*other.side)) 
    corner_bottomrightback = Point(other.x+(0.5*other.side), other.y-(0.5*other.side), other.z-(0.5*other.side))
    corner_bottomrightfront = Point(other.x+(0.5*other.side), other.y-(0.5*other.side), other.z+(0.5*other.side)) 
    #return true if all are false
    return not ((self.is_inside_point(corner_toprightback)) or (self.is_inside_point(corner_toprightfront)) or 
    (self.is_inside_point(corner_topleftback)) or (self.is_inside_point(corner_topleftfront)) or 
    (self.is_inside_point(corner_bottomleftback)) or (self.is_inside_point(corner_bottomleftfront)) or 
    (self.is_inside_point(corner_bottomrightback)) or (self.is_inside_point(corner_bottomrightfront)))

  # determine if another Cube intersects this Cube
  # two Cube objects intersect if they are not strictly
  # inside and not strictly outside each other
  # other is a Cube object
  # returns a Boolean
  def does_intersect_cube (self, other):
    if (self.is_inside_cube(other) == False) and (self.is_outside_cube(other) == False) and (other.is_inside_cube(self) == False) and (other.is_outside_cube(self) == False):
      return True

  # determine the volume of intersection if this Cube 
  # intersects with another Cube
  # other is a Cube object
  # returns a floating point number
  def intersection_volume (self, other):
    if (self.does_intersect_cube(other)==True):
      x_length = max(min(self.x-(self.side/2),other.x-(self.side/2)),0)
      y_length = max(min(self.y-(self.side/2),other.y-(self.side/2)),0)
      z_length = max(min(self.z-(self.side/2),other.z-(self.side/2)),0)
      intersection_vol = x_length*y_length*z_length
    else:
      intersection_vol = 0.0
    return float(intersection_vol)

  # return the largest Sphere object that is inscribed
  # by this Cube
  # Sphere object is inside the Cube and the faces of the
  # Cube are tangential planes of the Sphere
  # returns a Sphere object
  def inscribe_sphere (self):
    radius_sphere = self.side/2
    return Sphere(self.x, self.y, self.z, radius_sphere)

class Cylinder (object):
  # Cylinder is defined by its center (which is a Point object),
  # radius and height. The main axis of the Cylinder is along the
  # z-axis and height is measured along this axis
  def __init__ (self, x = 0, y = 0, z = 0, radius = 1, height = 1):
    self.x = float(x)
    self.y = float(y)
    self.z = float(z)
    self.center = Point(x,y,z)
    self.radius = float(radius)
    self.height = float(height)

  # returns a string representation of a Cylinder of the form: 
  # Center: (x, y, z), Radius: value, Height: value
  def __str__ (self):
    return ("Center: (" + str(self.x) + ", " + str(self.y) + ", " + str(self.z) + "), Radius: " + str(self.radius) + ", Height: " + str(self.height))

  # compute surface area of Cylinder
  # returns a floating point number
  def area (self):
    surface_area_cylinder = (2*math.pi*float(self.radius)*float(self.height)) + (2*math.pi*float(self.radius)*float(self.radius))
    return surface_area_cylinder

  # compute volume of a Cylinder
  # returns a floating point number
  def volume (self):
    volume_cylinder = math.pi*float(self.radius)*float(self.height)*float(self.radius)
    return volume_cylinder

  # determine if a Point is strictly inside this Cylinder
  # p is a Point object
  # returns a Boolean
  def is_inside_point (self, p):
    center_new = Point(p.x, p.y, self.z)
    return self.center.distance(center_new) < self.radius and (p.z > self.z-(self.height/2)) and (p.z < self.z+(self.height/2))

  # determine if a Sphere is strictly inside this Cylinder
  # a_sphere is a Sphere object
  # returns a Boolean
  def is_inside_sphere (self, a_sphere):
    side = a_sphere.radius*2
    turn_into_cube = Cube(a_sphere.x,a_sphere.y,a_sphere.z, side)
    return self.is_inside_cube(turn_into_cube)

  # determine if a Cube is strictly inside this Cylinder
  # determine if all eight corners of the Cube are inside
  # the Cylinder
  # a_cube is a Cube object
  # returns a Boolean
  def is_inside_cube (self, a_cube):
    corner_toprightback = Point(a_cube.x+(0.5*a_cube.side), a_cube.y+(0.5*a_cube.side), a_cube.z-(0.5*a_cube.side))
    corner_toprightfront = Point(a_cube.x+(0.5*a_cube.side), a_cube.y+(0.5*a_cube.side), a_cube.z+(0.5*a_cube.side))
    corner_topleftback = Point(a_cube.x-(0.5*a_cube.side), a_cube.y+(0.5*a_cube.side), a_cube.z-(0.5*a_cube.side)) 
    corner_topleftfront = Point(a_cube.x-(0.5*a_cube.side), a_cube.y+(0.5*a_cube.side), a_cube.z+(0.5*a_cube.side))
    corner_bottomleftback = Point(a_cube.x-(0.5*a_cube.side), a_cube.y-(0.5*a_cube.side), a_cube.z-(0.5*a_cube.side))
    corner_bottomleftfront = Point(a_cube.x-(0.5*a_cube.side), a_cube.y-(0.5*a_cube.side), a_cube.z+(0.5*a_cube.side)) 
    corner_bottomrightback = Point(a_cube.x+(0.5*a_cube.side), a_cube.y-(0.5*a_cube.side), a_cube.z-(0.5*a_cube.side))
    corner_bottomrightfront = Point(a_cube.x+(0.5*a_cube.side), a_cube.y-(0.5*a_cube.side), a_cube.z+(0.5*a_cube.side)) 
    if ((self.is_inside_point(corner_toprightback) == True) and (self.is_inside_point(corner_toprightfront) == True) and 
    (self.is_inside_point(corner_topleftback) == True) and (self.is_inside_point(corner_topleftfront) == True) and 
    (self.is_inside_point(corner_bottomleftback) == True) and (self.is_inside_point(corner_bottomleftfront) == True) and 
    (self.is_inside_point(corner_bottomrightback) == True) and (self.is_inside_point(corner_bottomrightfront) == True)):
      return True
    else:
      return False

  # determine if another Cylinder is strictly inside this Cylinder
  # other is Cylinder object
  # returns a Boolean
  def is_inside_cylinder (self, other):
    corner_toprightback = Point(other.x+other.radius, other.y+other.radius, other.z-(0.5*other.height))
    corner_toprightfront = Point(other.x+other.radius, other.y+other.radius, other.z+(0.5*other.height))
    corner_topleftback = Point(other.x-other.radius, other.y+other.radius, other.z-(0.5*other.height))
    corner_topleftfront = Point(other.x-other.radius, other.y+other.radius, other.z+(0.5*other.height))
    corner_bottomleftback = Point(other.x-other.radius, other.y-other.radius, other.z-(0.5*other.height))
    corner_bottomleftfront = Point(other.x-other.radius, other.y-other.radius, other.z+(0.5*other.height))
    corner_bottomrightback = Point(other.x+other.radius, other.y-other.radius, other.z-(0.5*other.height))
    corner_bottomrightfront = Point(other.x+other.radius, other.y-other.radius, other.z+(0.5*other.height))
    return ((self.is_inside_point(corner_toprightback)) and (self.is_inside_point(corner_toprightfront)) and 
    (self.is_inside_point(corner_topleftback)) and (self.is_inside_point(corner_topleftfront)) and 
    (self.is_inside_point(corner_bottomleftback)) and (self.is_inside_point(corner_bottomleftfront)) and 
    (self.is_inside_point(corner_bottomrightback)) and (self.is_inside_point(corner_bottomrightfront)))
  
  # determine if another Cylinder is strictly outside this Cylinder
  # other is Cylinder object
  # returns a Boolean
  def is_outside_cylinder (self, other):
    corner_toprightback = Point(other.x+other.radius, other.y+other.radius, other.z-(0.5*other.height))
    corner_toprightfront = Point(other.x+other.radius, other.y+other.radius, other.z+(0.5*other.height))
    corner_topleftback = Point(other.x-other.radius, other.y+other.radius, other.z-(0.5*other.height)) 
    corner_topleftfront = Point(other.x-other.radius, other.y+other.radius, other.z+(0.5*other.height))
    corner_bottomleftback = Point(other.x-other.radius, other.y-other.radius, other.z-(0.5*other.height))
    corner_bottomleftfront = Point(other.x-other.radius, other.y-other.radius, other.z+(0.5*other.height)) 
    corner_bottomrightback = Point(other.x+other.radius, other.y-other.radius, other.z-(0.5*other.height))
    corner_bottomrightfront = Point(other.x+other.radius, other.y-other.radius, other.z+(0.5*other.height)) 
    corner_1 = Point(other.x-other.radius, other.y, other.z)
    corner_2 = Point(other.x, other.y-other.radius, other.z) 
    corner_3 = Point(other.x+other.radius, other.y, other.z)
    corner_4 = Point(other.x, other.y-other.radius, other.z) 
    return not ((self.is_inside_point(corner_toprightback)) or (self.is_inside_point(corner_toprightfront)) or 
    (self.is_inside_point(corner_topleftback)) or (self.is_inside_point(corner_topleftfront)) or 
    (self.is_inside_point(corner_bottomleftback)) or (self.is_inside_point(corner_bottomleftfront)) or 
    (self.is_inside_point(corner_bottomrightback)) or (self.is_inside_point(corner_bottomrightfront)) or (self.is_inside_point(corner_1))
    or (self.is_inside_point(corner_2)) or (self.is_inside_point(corner_3)) or (self.is_inside_point(corner_4)))
    
  # determine if another Cylinder intersects this Cylinder
  # two Cylinder object intersect if they are not strictly
  # inside and not strictly outside each other
  # other is a Cylinder object
  # returns a Boolean
  def does_intersect_cylinder (self, other):
    return not(self.is_inside_cylinder(other) or self.is_outside_cylinder(other) or other.is_inside_cylinder(self) or other.is_outside_cylinder(self))

def main():
  # read data from standard input
  import sys
  # read the coordinates of the first Point p
  coordinates_P = sys.stdin.readline().split()
  #pint(coordinates_P)
  # create a Point object 
  P = Point(float(coordinates_P[0]),float(coordinates_P[1]), float(coordinates_P[2]))
  # read the coordinates of the second Point q
  coordinates_Q  = sys.stdin.readline().split()
  # create a Point object 
  Q = Point(float(coordinates_Q[0]),float(coordinates_Q[1]), float(coordinates_Q[2]))
  # read the coordinates of the center and radius of sphereA
  coordinates_sphereA = sys.stdin.readline().split()
  # create a Sphere object 
  sphere_A = Sphere(float(coordinates_sphereA[0]), float(coordinates_sphereA[1]), float(coordinates_sphereA[2]), float(coordinates_sphereA[3]))
  # read the coordinates of the center and radius of sphereB
  coordinates_sphereB = sys.stdin.readline().split()
  # create a Sphere object
  sphere_B = Sphere(float(coordinates_sphereA[0]), float(coordinates_sphereA[1]), float(coordinates_sphereA[2]), float(coordinates_sphereA[3]))
  # read the coordinates of the center and side of cubeA
  coordinates_cubeA = sys.stdin.readline().split()
  # create a Cube object 
  CubeA = Cube(float(coordinates_cubeA[0]), float(coordinates_cubeA[1]), float(coordinates_cubeA[2]), float(coordinates_cubeA[3]))
  #print(CubeA)
  # read the coordinates of the center and side of cubeB
  coordinates_cubeB = sys.stdin.readline().split()
  # create a Cube object 
  CubeB = Cube(float(coordinates_cubeB[0]), float(coordinates_cubeB[1]), float(coordinates_cubeB[2]), float(coordinates_cubeB[3]))
  # read the coordinates of the center, radius and height of cylA
  coordinates_cylA = sys.stdin.readline().split()
  # create a Cylinder object 
  cylA = Cylinder(float(coordinates_cylA[0]), float(coordinates_cylA[1]), float(coordinates_cylA[2]), float(coordinates_cylA[3]), float(coordinates_cylA[4]))
  # read the coordinates of the center, radius and height of cylB
  coordinates_cylB = sys.stdin.readline().split()
  # create a Cylinder object
  cylB = Cylinder(float(coordinates_cylB[0]), float(coordinates_cylB[1]), float(coordinates_cylB[2]), float(coordinates_cylB[3]), float(coordinates_cylB[4]))
  # print if the distance of p from the origin is greater 
  # than the distance of q from the origin
  origin = Point(0,0,0)
  if P.distance(origin) > Q.distance(origin):
    print("Distance of Point p from the origin is greater than the distance of Point q from the origin")
  else:
    print("Distance of Point p from the origin is not greater than the distance of Point q from the origin")
    #print(cylA.volume())
    #print(sphere_A.volume())
    
  # print if Point p is inside sphereA
  if sphere_A.is_inside_point(P):
    print("Point p is inside sphereA")
  else:
    print("Point p is not inside sphereA")
    
  # print if sphereB is inside sphereA
  if sphere_A.is_inside_sphere(sphere_B) == True:
    print("sphereB is inside sphereA")
  else:
    print("sphereB is not inside sphereA")
    
  # print if cubeA is inside sphereA
  if sphere_A.is_inside_cube(CubeA) == True:
    print("cubeA is inside sphereA")
  else:
    print("cubeA is not inside sphereA")
  
  # print if cylA is inside sphereA
  if sphere_A.is_inside_cyl(cylA) == True:
    print("cylA is inside sphereA")
  else:
    print("cylA is not inside sphereA")
    
  # print if sphereA intersects with sphereB
  if sphere_A.does_intersect_sphere(sphere_B) == True:
    print("sphereA does intersect sphereB")
  else:
    print("sphereA does not intersect sphereB")

  # print if cubeB intersects with sphereB
  if sphere_B.does_intersect_cube(CubeB) == True:
    print("cubeB does intersect sphereB")
  else:
    print("cubeB does not intersect sphereB")

  # print if the volume of the largest Cube that is circumscribed 
  # by sphereA is greater than the volume of cylA
  if sphere_A.circumscribe_cube().volume() > cylA.volume():
    print("Volume of the largest Cube that is circumscribed by sphereA is greater than the volume of cylA")
  else:
    print("Volume of the largest Cube that is circumscribed by sphereA is not greater than the volume of cylA")
  # print if Point p is inside cubeA
  if CubeA.is_inside_point(P):
    print("Point p is inside cubeA")
  else:
    print("Point p is not inside cubeA")
  # print if sphereA is inside cubeA
  if CubeA.is_inside_sphere(sphere_A) == True:
    print("sphereA is inside cubeA")
  else:
    print("sphereA is not inside cubeA")
  # print if cubeB is inside cubeA
  if CubeA.is_inside_cube(CubeB) == True:
    print("cubeB is inside cubeA")
  else:
    print("cubeB is not inside cubeA")
  # print if cylA is inside cubeA
  if CubeA.is_inside_cylinder(cylA) == True:
    print("cylA is inside cubeA")
  else:
    print("cylA is not inside cubeA")
  # print if cubeA intersects with cubeB
  if CubeA.does_intersect_cube(CubeB) == True:
    print("cubeA does intersect cubeB")
  else:
    print("cubeA does not intersect cubeB")
  # print if the intersection volume of cubeA and cubeB
  # is greater than the volume of sphereA
  if CubeA.intersection_volume(CubeB) > sphere_A.volume():
    print("Intersection volume of cubeA and cubeB is greater than the volume of sphereA")
  else:
    print("Intersection volume of cubeA and cubeB is not greater than the volume of sphereA")
  # print if the surface area of the largest Sphere object inscribed 
  # by cubeA is greater than the surface area of cylA
  if CubeA.inscribe_sphere().area() > cylA.area():
    print("Surface area of the largest Sphere object inscribed by cubeA is greater than the surface area of cylA")
  else:
    print("Surface area of the largest Sphere object inscribed by cubeA is not greater than the surface area of cylA")
  
  # print if Point p is inside cylA
  if cylA.is_inside_point(P):
    print("Point p is inside cylA")
  else:
    print("Point p is not inside cylA")
  # print if sphereA is inside cylA
  if sphere_A.is_inside_cyl(cylA):
    print("sphereA is inside cylA")
  else:
    print("sphereA is not inside cylA")
  # print if cubeA is inside cylA
  if cylA.is_inside_cube(CubeA) == True:
    print("cubeA is inside cylA")
  else:
    print("cubeA is not inside cylA")
  # print if cylB is inside cylA
  if cylA.is_inside_cylinder(cylB) == True:
    print("cylB is inside cylA")
  else:
    print("cylB is not inside cylA")
  # print if cylB intersects with cylA
  if cylA.does_intersect_cylinder(cylB) == True:
    print("cylB does intersect cylA")
  else:
    print("cylB does not intersect cylA")
if __name__ == "__main__":
  main()
