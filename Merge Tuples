#  File: Intervals.py

#  Description: This project combines overlapping intervals in order to 
# create the smallest amount of intervals encompassing the same numbers.

#  Date Last Modified: 1/30/2022
def merge_tuples (tuples_list):

# Input: tuples_list is a list of tuples of denoting intervals
# Output: a list of tuples sorted by ascending order of the size of
#         the interval
#         if two intervals have the size then it will sort by the
#         lower number in the interval
  tuples_list.sort()
  merged_tuples = []
  merged_tuples.append(tuples_list[0])
  #loop through each tuple to check
  for num in range(1, len(tuples_list)):
    merged = False
    #compare tuple at num to merged tuples list
    for x in range(len(merged_tuples)):
      #check if lower end of tuple is in range of a previous tuple
      if merged_tuples[x][0] <= tuples_list[num][0] <= merged_tuples[x][1]:
        merged = True
        #check if higher end of tuple is higher than high end of said prev tuple
        if tuples_list[num][1] > merged_tuples[x][1]:
          merged_tuples.append(tuple((merged_tuples[x][0],tuples_list[num][1])))
          merged_tuples.remove(merged_tuples[x])
        #if higher end if lower than high end of said prev tuple, it gets eaten
      #check if higher end of tuple is in range of a previous tuple
      elif merged_tuples[x][0] <= tuples_list[num][1]  <= merged_tuples[x][1]:
        merged = True
        #check if low end of tuple_list is outside of bounds of range from prev tuple
        if tuples_list[num][0] < merged_tuples[x][0]:
          merged_tuples.append(tuple((tuples_list[num][0],merged_tuples[x][1])))
          merged_tuples.remove(merged_tuples[x])
      #check if new tuple engulfs a merged tuple
      elif tuples_list[num][0]< merged_tuples[x][0]:
        if tuples_list[num][1]> merged_tuples[x][1]:
          merged_tuples.append(tuples_list[num])
          merged_tuples.remove(merged_tuples[x])
          merged = True
    if merged == False:
      merged_tuples.append(tuples_list[num])
  print(merged_tuples)
  return sort_by_interval_size(merged_tuples)
  
def sort_by_interval_size (tuples_list):
# Input: no input
# Output: a string denoting all test cases have passed
  sort_tuples = []
  sort_tuples.append(tuples_list[0])
  
  for tup in range(1, len(tuples_list)):
    #if u can check both sides of where a tuple fits
    for sorteds in range(len(sort_tuples)):
      #if length of tuple < length of tuple in sorted, add to sorted before sorted tuple 
      if abs(tuples_list[tup][0]-tuples_list[tup][1]) < abs(sort_tuples[sorteds][0]-sort_tuples[sorteds][1])\
        or(abs(tuples_list[tup][0]-tuples_list[tup][1]) == abs(sort_tuples[sorteds][0]-sort_tuples[sorteds][1]) and tuples_list[tup][0] < sort_tuples[sorteds][0]):
        sort_tuples.insert(sorteds, tuples_list[tup])
        break
      #if not less than anything stick to end 
      elif sorteds == len(sort_tuples)-1:
        sort_tuples.append(tuples_list[tup])
        break
  print(sort_tuples)
  return sort_tuples
      
  
  
def test_cases ():
  assert merge_tuples([(1,2)]) == [(1,2)]
  # write your own test cases

  assert sort_by_interval_size([(1,3), (4,5)]) == [(4,5), (1,3)]
  # write your own test cases

  return "all test cases passed"
import sys
def main():
  # open file intervals.in and read the data and create a list of tuples
  # merge the list of tuples
  list_tuples = []
  for x in range(int(input().strip())):
    list_tuples.append(tuple(map(int, input().strip().split())))
  # sort the list of tuples according to the size of the interval
  #print(list_tuples)
  # run your test cases
  merge_tuples(list_tuples)
  
  '''
  print(test_cases)
  '''

if __name__ == "__main__":
  main()
